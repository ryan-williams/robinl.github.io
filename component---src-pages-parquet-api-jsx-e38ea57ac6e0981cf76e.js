(self.webpackChunkgatsby_starter_hello_world=self.webpackChunkgatsby_starter_hello_world||[]).push([[299],{2263:function(e,t,a){"use strict";a(7294);var r=a(835),o=a(8847),s=a(7414),i=a(6140),n=a(674);t.Z=function(e){var t;return t=e.define?(0,n.tZ)(o.Z,{define:e.define,output_order:e.output_order}):e.children,(0,n.tZ)(r.Z,{css:e.className},(0,n.tZ)(i.Z,{title:e.post_frontmatter.title,description:e.post_frontmatter.description}),(0,n.tZ)(s.Z,{post_frontmatter:e.post_frontmatter}),t)}},869:function(e,t,a){"use strict";a.r(t),a.d(t,{default:function(){return d},frontmatter:function(){return p}});a(7294);var r=a(2263),o=(a(9601),a(3948),a(6992),a(1539),a(7941),a(4983)),s=a(674);function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r])}return e}).apply(this,arguments)}var n={_frontmatter:{}};function l(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,["components"]);return(0,o.kt)("wrapper",i({},n,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",null,"Why parquet files are my preferred API for bulk open data"),(0,o.kt)("h1",null,"Summary"),(0,o.kt)("p",null,"Statically hosted parquet files provide one of the easiest to use and most performant APIs for accessing bulk¹ data, and are far simpler and cheaper to provide than custom APIs. Furthermore, features of more sophisticated APIs are often best left to the end user to perform in their preferred data analysis tools."),(0,o.kt)("p",null,"With DuckDB, the parquet files are directly queryable using SQL, providing a universal API to interrogate such datasets. This can be used from languages like Python and R, and even works in the browser."),(0,o.kt)("p",null,"This can be extremely performant. The ",(0,o.kt)("a",i({parentName:"p"},{href:"https://geoportal.statistics.gov.uk/datasets/national-statistics-postcode-lookup-2021-census-november-2022/about"}),"National Statistics Postcode Lookup")," is a 1.1GB csv file with 2.6 million rows. When hosted as a parquet file, this can be queried ",(0,o.kt)("a",i({parentName:"p"},{href:"https://shell.duckdb.org/"}),"in the brower")," to ",(0,o.kt)("a",i({parentName:"p"},{href:"https://gist.github.com/RobinL/87b3fd14f5696ee72c732237635ac72c"}),"return a single postcode in 13 seconds")," from a cold start on a home internet connection, and 100ms for subsequent queries."),(0,o.kt)("h1",null,"Introduction"),(0,o.kt)("p",null,"As a data scientist, I find the complexity of many open data services frustrating. I don't want to have to learn how to query an endpoint, think about data types, or read through API documentation. Just give me the data!"),(0,o.kt)("p",null,"In this post, I argue that the best way of serving bulk data is usually one or more parquet files, served at a predictable URL with ",(0,o.kt)("a",i({parentName:"p"},{href:"https://enable-cors.org/"}),"CORS "),"enabled². These files should represent the canonical version of the data, and any other data products (such as Excel files, reports, or CSVs) should be derived from these files."),(0,o.kt)("p",null,"SQL provides a familiar, universal API on top of these files, enabling filtering, joining, calculation or aggregation services that may otherwise be custom features of data APIs. Software libraries such as DuckDB enable SQL to be run directly and efficiently on these parquet files, including from the browser (meaning no additional software is required)."),(0,o.kt)("p",null,"To be concrete about this proposal, if I wanted to serve open data on the number of widgets produced, the URL structure could be something like:"),(0,o.kt)("div",{className:"gatsby-highlight","data-language":"text"},(0,o.kt)("pre",i({parentName:"div"},{className:"language-text"}),(0,o.kt)("code",i({parentName:"pre"},{className:"language-text"}),"www.my-organisation.com/open_data/v1/widgets_2021.parquet\nwww.my-organisation.com/open_data/v1/widgets_2022.parquet\nwww.my-organisation.com/open_data/v1/widgets_latest.parquet"))),(0,o.kt)("p",null,"The dated URLs provide fixed snapshots for reproducible results, and the ‘latest’ URL always provides the most up-to-date data. I would recommend serving a .csv copy at equivalent URLs. A directory listing service should also be provided to enable data discovery and scraping."),(0,o.kt)("h1",null,"Benefits of using static files"),(0,o.kt)("h2",null,"Gaining familiarity with the data"),(0,o.kt)("p",null,"My preferred way of getting acquainted with a new dataset is usually by looking at a sample of rows, and then exploring the data further with queries and automatic profiling tools. Only later am I likely to look at documentation or metadata."),(0,o.kt)("p",null,"Loading a sample of rows from an online parquet file is a ",(0,o.kt)("a",i({parentName:"p"},{href:"https://pandas.pydata.org/docs/reference/api/pandas.read_parquet.html"}),"simple one-liner")," in most analytical programming languages - usually the same familiar code as loading in data from disk. Viewing metadata is also ",(0,o.kt)("a",i({parentName:"p"},{href:"https://gist.github.com/RobinL/87b3fd14f5696ee72c732237635ac72c#file-view_metadata-py-L2"}),"a one-liner.")),(0,o.kt)("p",null,"There are a wide range of free tools to dig deeper, and each user will have their favourite (e.g. ",(0,o.kt)("a",i({parentName:"p"},{href:"https://github.com/rilldata/rill-developer"}),"Rill"),", ",(0,o.kt)("a",i({parentName:"p"},{href:"https://github.com/aeturrell/skimpy"}),"skimpy"),", ",(0,o.kt)("a",i({parentName:"p"},{href:"https://github.com/ydataai/pandas-profiling"}),"pandas profiling"),", ",(0,o.kt)("a",i({parentName:"p"},{href:"https://github.com/simonw/datasette"}),"datasette")," or ",(0,o.kt)("a",i({parentName:"p"},{href:"https://towardsdatascience.com/four-r-packages-for-automated-exploratory-data-analysis-you-might-have-missed-c38b03d4ee16"}),"R equivalents"),"). Nowadays, this can even be ",(0,o.kt)("a",i({parentName:"p"},{href:"https://observablehq.com/d/735b2408ad41dcf8"}),"done in the web browser"),", without the need for any special software to be downloaded."),(0,o.kt)("h2",null,"Simplicity of use"),(0,o.kt)("p",null,"Importing data from parquet is usually as simple as ",(0,o.kt)("a",i({parentName:"p"},{href:"https://pandas.pydata.org/docs/reference/api/pandas.read_parquet.html"}),"pointing the tool at the URL"),". This includes Excel, in which it’s possible to enable ",(0,o.kt)("a",i({parentName:"p"},{href:"https://superuser.com/questions/235438/can-you-pull-excel-data-from-an-external-and-dynamic-csv-file"}),"easy data refreshes")," without needing to write code."),(0,o.kt)("p",null,"In contrast, in the case of many custom APIs, the user would need to write non-trivial custom code to obtain the data prior to being able to use these tools."),(0,o.kt)("p",null,"Users can then use their preferred analytical tools to manipulate and query the data. One particularly interesting recent development is ",(0,o.kt)("a",i({parentName:"p"},{href:"https://shell.duckdb.org/"}),"DuckDB in the browser"),", which ",(0,o.kt)("a",i({parentName:"p"},{href:"https://observablehq.com/d/735b2408ad41dcf8"}),"enables parquet files to be queried using SQL directly in the web browser"),", without the need for installing additional software. If open data was consistently served as parquet files, this would effectively provide a universal API to allow all open data to be interrogated quickly and easily, with no servers required."),(0,o.kt)("p",null,"Importing from parquet also makes it exceptionally easy to write a Reproducible Analytical Pipeline on top of the data. It also encourages internal use of open data products (‘dogfooding’), which is an effective way of detecting problems early and continuous improvement."),(0,o.kt)("h2",null,"Web dashboards and other products using CORS"),(0,o.kt)("p",null,(0,o.kt)("a",i({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"}),"Cross-Origin Resource Sharing")," (CORS) enables any website to load your data directly from source parquet files without the need for a server."),(0,o.kt)("p",null,"This enables self-updating data dashboards to be built on the open data in just a few lines of code - whether those be official products built by the data owner, or other internet users. This leads to a very simple architecture that reduces copies of the canonical data and prevents dashboards from going stale."),(0,o.kt)("h2",null,"Cheap and simple and performant hosting"),(0,o.kt)("p",null,"Serving data as a static file is probably the simplest and cheapest possible architecture for open data services. Modern cloud services mean it’s as simple as uploading the file to blob storage (e.g. AWS S3). Data access will ",(0,o.kt)("a",i({parentName:"p"},{href:"https://docs.aws.amazon.com/AmazonS3/latest/userguide/optimizing-performance.html"}),"remain performant even if traffic is high"),", and the service will have very high reliability and availability. All of this is taken care of by the cloud provider."),(0,o.kt)("p",null,"For the end user, a parquet file served from blob storage will also be one of the fastest possible ways of getting data into their data analysis software from a remote provider - often far faster than obtaining data from a custom API."),(0,o.kt)("p",null,"Overall, serving static parquet files is likely to be orders of magnitude cheaper than developing a custom solution."),(0,o.kt)("h2",null,"Building other data services on top of the static files"),(0,o.kt)("p",null,"It’s difficult to predict what services may wish to be downstream users of the open data. However, serving performant data in a ",(0,o.kt)("a",i({parentName:"p"},{href:"https://arrow.apache.org/docs/python/api/datatypes.html"}),"typed")," format with wide support enables others to easily build services on top of the data."),(0,o.kt)("p",null,"This provides a clean separation of concerns between data engineers, who are responsible for the canonical datasets, and digital services that may have bespoke needs to consume this data in bespoke way - e.g. a lookup service. The simple availability of the data is also likely to make it simpler to build and maintain these downstream services³."),(0,o.kt)("h1",null,"Benefits of using parquet files vs other formats"),(0,o.kt)("p",null,"Parquet is particularly well suited to sharing a wide variety of data online for a variety of reasons:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Data is typed, meaning the data type of each column is specified and enforced by the file format. This contrasts to .csv format, where data typing issues are a common source of problems in analysis"),(0,o.kt)("li",{parentName:"ul"},"Data is compressed, greatly reducing file size"),(0,o.kt)("li",{parentName:"ul"},"Parquet supports ",(0,o.kt)("a",i({parentName:"li"},{href:"https://arrow.apache.org/blog/2022/10/08/arrow-parquet-encoding-part-2/"}),"complex nested data types"),", giving it great flexibility for supporting many different types of data. For example, it's possible to store lists and dicts within columns, enabling normalisation which in some cases may make the data easier to interpret and use, and reduce file size."),(0,o.kt)("li",{parentName:"ul"},"Parquet is ",(0,o.kt)("a",i({parentName:"li"},{href:"https://arrow.apache.org/docs/"}),"widely supported in modern data tools"),", and one of the fastest ways of reading large datasets"),(0,o.kt)("li",{parentName:"ul"},"Parquet supports the inclusion of ",(0,o.kt)("a",i({parentName:"li"},{href:"https://arrow.apache.org/docs/python/generated/pyarrow.Schema.html#pyarrow.Schema.metadata"}),"arbitrary metadata"),", which could be used, for instance, to describe the contents of columns or data lineage"),(0,o.kt)("li",{parentName:"ul"},"Parquet also automatically generates ",(0,o.kt)("a",i({parentName:"li"},{href:"https://arrow.apache.org/docs/python/parquet.html#inspecting-the-parquet-file-metadata"}),"certain metadata"),", such as the cardinality of some columns, the number of rows, etc."),(0,o.kt)("li",{parentName:"ul"},"Parquet format is increasingly used in data warehousing, meaning that it is often the 'native' format in which organisations hold their data internally.")),(0,o.kt)("p",null,"Alongside Apache Arrow, parquet is rapidly becoming a de facto standard for saving, transferring and sharing data."),(0,o.kt)("h1",null,"When are static files inappropriate?"),(0,o.kt)("p",null,"There are some cases where static parquet files may be inappropriate. Examples include:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Very large datasets")," of 10s of millions of records. For reference, the ",(0,o.kt)("a",i({parentName:"li"},{href:"https://www.gridwatch.templar.co.uk/download.php"}),"gridwatch dataset")," contains over 1m rows and 24 columns of the composition of UK energy generation every 5 minutes since 2011. It’s 29Mb as a parquet file (GZIP compression) or 55MB (SNAPPY). ",(0,o.kt)("a",i({parentName:"li"},{href:"https://gist.github.com/RobinL/87b3fd14f5696ee72c732237635ac72c"}),"A query")," run ",(0,o.kt)("a",i({parentName:"li"},{href:"https://shell.duckdb.org/"}),"in the browser")," to find the maximum power generation from wind takes 6 seconds on my laptop (most of which is data download - subsequent similar queries take 200ms since the data is cached).\nI would recommend keeping parquet files to around 200MB or less if possible. In these cases it may be appropriate to offer an API that allows users to query the underlying data to return smaller subsets⁴."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"You’re not serving bulk data. ")," If your users are mostly software developers who want to make transactional or atomic requests, then static files are inappropriate. For example, if you want to run a ",(0,o.kt)("a",i({parentName:"li"},{href:"https://postcodes.io/"}),"postcode lookup service"),", then serving the ",(0,o.kt)("a",i({parentName:"li"},{href:"https://geoportal.statistics.gov.uk/datasets/national-statistics-postcode-lookup-2021-census-november-2022/about"}),"NSPL")," as a single parquet file would not serve the needs of your users⁵."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Relational data with a complex schema. "),"In this case, serving a sqlite or duckdb database as a single file may be a better fit."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Private datasets with granular access control"),". If you need row or column based access controls, static files are unlikely to be appropriate, ",(0,o.kt)("a",i({parentName:"li"},{href:"https://twitter.com/gunnarmorling/status/1612538897564573697"}),"as noted here"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Rapidly changing data to which users need immediate access"),". If your data is updated very frequently and your users need access to up-to-the-minute data, static files may not be appropriate, as noted ",(0,o.kt)("a",i({parentName:"li"},{href:"https://twitter.com/kardotjewell/status/1612517499496456209"}),"here"),".")),(0,o.kt)("p",null,"¹ By 'bulk' data, I mean APIs designed to serve whole datasets to the end user, as opposed to 'atomic' APIs which serve individual data points (e.g. a postcode lookup) for use in downstream services"),(0,o.kt)("p",null,"² Cross-Origin Resource Sharing (CORS) enables any website to load your data directly from source parquet files without the need for a server."),(0,o.kt)("p",null,"³ For example, it may be possible to produce a widget lookup service by running DuckDB as a AWS lambda function, with the data cached by lambda. Some recent, relevant tweets: ",(0,o.kt)("a",i({parentName:"p"},{href:"https://mobile.twitter.com/BoilingData/status/1611082851184791553"}),"https://mobile.twitter.com/BoilingData/status/1611082851184791553"),", ",(0,o.kt)("a",i({parentName:"p"},{href:"https://twitter.com/gunnarmorling/status/1609958952040599552"}),"https://twitter.com/gunnarmorling/status/1609958952040599552")),(0,o.kt)("p",null,"⁴ But I would investigate whether serving several smaller files may be appropriate first (e.g. one for each year). The problem with developing a custom service is that if the data is large enough to merit one, the processing requirements of such a service are relatively high."),(0,o.kt)("p",null,"⁵ That said, the NSPL - a 2m row dataset which is over 1GB in csv format is 69Mb as a parquet file. ",(0,o.kt)("a",i({parentName:"p"},{href:"https://gist.github.com/RobinL/87b3fd14f5696ee72c732237635ac72c#file-gridwatch-sql-L10"}),"Using this for occasional/ad hoc lookups is easy and takes less than 15 seconds on my laptop"),". Obviously not suitable for a production service, but not bad."))}l.isMDXComponent=!0;var p={title:"Why parquet files are my preferred API for bulk open data",post_date:"2023-01-09",code_url:"https://github.com/RobinL/robinl.github.io/blob/dev/src/mdx/parquet_api.mdx",post_type:"mdx",post_category:"data",description:"Open data should be served as CORS-enabled parquet files rather than using a custom API"},d=function(e){e.data;return(0,s.tZ)(r.Z,{post_frontmatter:p},(0,s.tZ)(l,null))}}}]);
//# sourceMappingURL=component---src-pages-parquet-api-jsx-e38ea57ac6e0981cf76e.js.map