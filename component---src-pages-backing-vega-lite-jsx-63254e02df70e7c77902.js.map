{"version":3,"sources":["webpack://gatsby-starter-hello-world/./src/components/mdx_obs_page.jsx","webpack://gatsby-starter-hello-world/./src/mdx/backing_vega_lite.mdx","webpack://gatsby-starter-hello-world/./src/pages/backing_vega_lite.jsx"],"names":["props","post","define","output_order","children","css","className","title","post_frontmatter","description","layoutProps","_frontmatter","MDXContent","components","mdxType","parentName","isMDXComponent","frontmatter","post_date","code_url","post_type","post_category","data"],"mappings":"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","file":"component---src-pages-backing-vega-lite-jsx-63254e02df70e7c77902.js","sourcesContent":["import React from 'react'\nimport Layout from \"../layouts/layout\"\nimport ObeservableNotebookDiv from \"./observable_div\"\nimport PostFrontMatter from \"./post_frontmatter\"\nimport SEO from \"../components/seo\"\n\nfunction ObsMdxPage(props) {\n\n\n  let post\n\n  if (props.define) {\n    post = <ObeservableNotebookDiv define={props.define} output_order={props.output_order} />\n  } else {\n    post = props.children\n  }\n\n  return (\n    <Layout css={props.className}>\n      <SEO title={props.post_frontmatter.title} description={props.post_frontmatter.description} />\n      <PostFrontMatter post_frontmatter={props.post_frontmatter} />\n      {post}\n    </Layout>\n  )\n\n}\n\nexport default ObsMdxPage","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`Why I’m backing Vega-Lite as our default tool for data visualisation`}</h1>\n    <p>{`The range of data visualisation tools available to data scientists is vast¹. If they’re anything like me, beginner data scientists often don’t put too much thought into which tool to learn — and often just pick a tool on the basis of some impressive outputs they’ve seen online.`}</p>\n    <p>{`On any given team, there will tend to be a range of personal favourites. This inconsistency imposes a cost on the team in two ways:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Data visualisation tools can take months to master, so a range of tools makes it harder to collaborate and share work, and harder to maintain codebases.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Not all tools are equal. The quality of tools varies in their flexibility, the quality of their APIs, and the quality of the data visualisation they produce.`}</p>\n      </li>\n    </ul>\n    <p>{`As a result, it makes sense for teams to spend time choosing a ‘sensible default’, and stick with it in most circumstances. I think Vega-Lite is the right choice for standardisation, for the following reasons²:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Consistent, disciplined API underpinned by well-designed grammar of graphics. `}</strong>{`Data visualisation is the process of mapping different elements of a dataset to visual encodings such as positions on the x and y axes, colours, or sizes. I’ve never seen this more clearly expressed than in the Vega-Lite API. This makes the API extremely predictable, and easy to understand.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Founded on academic research. `}</strong>{`Vega-Lite is a product of the`}<a parentName=\"p\" {...{\n            \"href\": \"http://idl.cs.washington.edu/\"\n          }}>{` UW Interactive Data Lab`}</a>{`, one of the leading academic centres for data visualisation. It’s heavily informed by research on visual perception and how to convey data visually as accurately as possible. `}<a parentName=\"p\" {...{\n            \"href\": \"https://www.youtube.com/watch?v=vc1bq0qIKoA\"\n          }}>{`This`}</a>{` is a great video intro to some of this research³.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Advanced interactivity. `}</strong>{`Vega-Lite provides the most powerful declarative system I’ve seen for advanced interactivity between charts — such as `}<a parentName=\"p\" {...{\n            \"href\": \"https://vega.github.io/vega-lite/examples/interactive_seattle_weather.html\"\n          }}>{`brushing one chart to filter the data displayed in another one`}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Language agnostic. `}</strong>{`Vega-Lite charts are fully specified by a declarative .json based syntax. You can build Vega Lite charts by `}<a parentName=\"p\" {...{\n            \"href\": \"https://vega.github.io/editor/#/\"\n          }}>{`writing raw json,`}</a>{` from Python (using `}<a parentName=\"p\" {...{\n            \"href\": \"https://altair-viz.github.io/\"\n          }}>{`Altair`}</a>{`), from R (using the`}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/vegawidget/altair\"\n          }}>{` R interface to Altair`}</a>{`), and from `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/fredo-dedup/VegaLite.jl\"\n          }}>{`Julia`}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\"><a parentName=\"strong\" {...{\n              \"href\": \"https://vega.github.io/vega-lite/examples/\"\n            }}>{`Looks great`}</a></strong>{`. Good data visualisation can never be purely theoretical — an interesting visualisation which ‘breaks’ the rules can be more compelling than something more grounded in theory that looks boring or outdated. Vega-Lite `}<a parentName=\"p\" {...{\n            \"href\": \"https://vega.github.io/vega-lite/examples/\"\n          }}>{`looks modern and slick`}</a>{` using the default settings, and is also `}<a parentName=\"p\" {...{\n            \"href\": \"https://beta.observablehq.com/@domoritz/vega-themes-demo\"\n          }}>{`themable`}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Coherent ‘escape valves’ when Vega-Lite is not sufficiently flexible. `}</strong>{`Visualisation libraries involve a trade off between flexibility and ease of use. With most libraries, there are some customisations or chart types which are simply not possible, and the user has to resort to a learning a completely different tool (e.g. d3.js) to achieve their goals. Vega-Lite is is part of a more coherent set of abstractions. Users can fall back on the more verbose, but more customisable Vega syntax when Vega-Lite is not sufficient, and Vega will be instantly familiar. And both Vega and Vega-Lite share a range of core concepts with d3.js (an imperative language), which gives essentially unlimited flexibility. Coming to Vega-Lite from d3.js, I found that it immediately ‘made sense’ because of these shared concepts.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Web-enabled by default, and easy to host. `}</strong>{`It is trivial to embed `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/vega/vega-embed\"\n          }}>{`Vega-Lite into any website`}</a>{`, which can then be hosted on a static web host because data processing and interaction is all dealt with by the front-end. The ease of embedding charts has resulted in it being adopted within a number of high profile websites and tools, such as `}<a parentName=\"p\" {...{\n            \"href\": \"https://en.wikipedia.org/wiki/Wikipedia:Graphs_and_charts#Vega\"\n          }}>{`Wikipedia`}</a>{` and `}<a parentName=\"p\" {...{\n            \"href\": \"https://www.elastic.co/guide/en/kibana/current/vega-graph.html\"\n          }}>{`Kibana`}</a>{`. If you need to embed graphics elsewhere, you can convert them into a svg or `}<a parentName=\"p\" {...{\n            \"href\": \"https://vega.github.io/vega/usage/\"\n          }}>{`high resolution png.`}</a></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Vega-Lite charts are easy to incorporate into more complex webapps. `}</strong>{`Vega View provides hooks so that Vega-Lite charts can be `}<a parentName=\"p\" {...{\n            \"href\": \"https://beta.observablehq.com/@domoritz/reactive-vega-lite\"\n          }}>{`modified by external events`}</a>{`, and also means that charts can `}<a parentName=\"p\" {...{\n            \"href\": \"https://beta.observablehq.com/@mbostock/observing-vega-signals\"\n          }}>{`expose events to other parts of the website`}</a>{`. This means that user interaction with a chart can drive the behaviour of other parts of your website.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`GUIs and other spec generation tools. [`}</strong>{`Voyager2](`}<a parentName=\"p\" {...{\n            \"href\": \"http://vega.github.io/voyager/\"\n          }}>{`http://vega.github.io/voyager/`}</a>{`) is visualisation recommendation tool which will allow the user to build specs using point-and-click, or will automatically build a range of Vega charts based on a dataset. `}<a parentName=\"p\" {...{\n            \"href\": \"http://idl.cs.washington.edu/papers/draco/\"\n          }}>{`Draco`}</a>{` is a cutting edge visualisation recommendation tool that won the InfoVis 2018 Best Paper Award, that suggests specs based optimising ease of visual perception. `}<a parentName=\"p\" {...{\n            \"href\": \"http://idl.cs.washington.edu/papers/lyra/\"\n          }}>{`Lyra`}</a>{` provide a GUI in which users can create heavily customised charts using point-and-click drawing tools.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Built into key data science tools by default. `}</strong>{`A Vega-Lite viewer is built into Jupyterlab by default. Voyager can be installed into JupyterLab as an `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/altair-viz/jupyterlab_voyager\"\n          }}>{`extension`}</a>{`, enabling datasets to be opened in Voyager.** **Pandas dataframes can be extended to support `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/jakevdp/pdvega\"\n          }}>{`auto-generation of vega charts`}</a>{`. JupyterLab looks set to become the most popular development environment for data scientists, so Vega’s popularity looks set to continue growing.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Reactive dataflows and strong separation of concerns result in high performance. `}</strong>{`Vega-Lite is underpinned by a sophisticated engine that is aware of what needs to be re-computed when inputs change or in reaction to other events. This eliminates unnecessary code execution. More generally, there is a strong separation of concerns between the specification and its evaluation, enabling iterative performance enhancement behind the scenes. More details are `}<a parentName=\"p\" {...{\n            \"href\": \"https://beta.observablehq.com/@jheer/how-vega-works\"\n          }}>{`here`}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Free and open source. `}</strong>{`You can find the main Vega-Lite codebase `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/vega/vega-lite\"\n          }}>{`here`}</a>{`.`}</p>\n      </li>\n    </ul>\n    <h2>{`How to get started`}</h2>\n    <p>{`The Vega-Lite docs have a good `}<a parentName=\"p\" {...{\n        \"href\": \"https://vega.github.io/vega-lite/tutorials/getting_started.html\"\n      }}>{`getting started tutorial`}</a>{`.`}</p>\n    <p>{`If you’re a Python user, I recommend Altair to write your Vega-Lite specs. Jake VanderPlas is the author of Altair, and ran an `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.youtube.com/watch?v=ms29ZPUKxbU\"\n      }}>{`excellent tutorial `}</a>{`at Pycon 2018.`}</p>\n    <p>{`For further details, the Vega-Lite team did a `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.youtube.com/watch?v=9uaHRWj04D4&t=18s\"\n      }}>{`great talk at OpenVis 2017`}</a>{`, and there is another more in depth talk by the team `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.youtube.com/watch?v=Nsrz4YdaZ_A\"\n      }}>{`here`}</a>{`.`}</p>\n    <p>{`Jupyter users who just want to get their feet wet can try `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/altair-viz/pdvega\"\n      }}>{`pdvega`}</a>{`.`}</p>\n    <h3>{`Endnotes`}</h3>\n    <p>{`¹ For a sense of the scale of the landscape, see `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/rougier/python-visualization-landscape\"\n      }}>{`here`}</a>{` for a graphic showing just the Python part.`}</p>\n    <p>{`² I have come to this conclusion after working with quite a wide range of highly-recommended (and very good) tools, including matplotlib, ggplot2, d3.js, highcharts, ggivs, Vega, Vega-Lite and plotly.`}</p>\n    <p>{`³ These influences run deep. The defaults built into vega-lite are carefully thought out, and grounded in research. For instance, how much does a typical data scientist think about which colour scales to use? This is actually the subject of`}<a parentName=\"p\" {...{\n        \"href\": \"https://idl.cs.washington.edu/files/2018-QuantitativeColor-CHI.pdf\"\n      }}>{` rigorous academic studies`}</a>{` — and the best ones are the defaults which are built into Vega-Lite.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from 'react'\nimport ObsMdxPage from \"../components/mdx_obs_page\"\nimport MDXDocument from \"../mdx/backing_vega_lite.mdx\"\n\nexport const frontmatter = {\n         title: \"Why I’m backing Vega-Lite as our default tool for data visualisation\",\n         post_date: \"2018-08-22\",\n         code_url:\n           \"https://github.com/RobinL/robinl.github.io/blob/dev/src/mdx/backing_vega_lite.mdx\",\n         post_type: \"mdx\",\n         post_category: \"data\",\n         description: \"hy I’m backing Vega-Lite as our default tool for data visualisation\"\n       }\n\nexport default ({ data }) => (\n    <ObsMdxPage post_frontmatter={frontmatter}>\n        <MDXDocument />\n    </ObsMdxPage>\n)"],"sourceRoot":""}