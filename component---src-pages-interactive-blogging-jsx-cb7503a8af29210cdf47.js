(self.webpackChunkgatsby_starter_hello_world=self.webpackChunkgatsby_starter_hello_world||[]).push([[340],{7374:function(e,t,n){"use strict";function o(e){this.wrapped=e}n.d(t,{Z:function(){return o}})},9122:function(e,t,n){"use strict";n.d(t,{Z:function(){return a}});var o=n(7374);function a(e){return new o.Z(e)}},2465:function(e,t,n){"use strict";function o(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}n.d(t,{Z:function(){return o}})},9395:function(e,t,n){"use strict";n.d(t,{Z:function(){return r}});var o=n(7374);function a(e){var t,n;function a(t,n){try{var i=e[t](n),s=i.value,b=s instanceof o.Z;Promise.resolve(b?s.wrapped:s).then((function(e){b?a("return"===t?"return":"next",e):r(i.done?"return":"normal",e)}),(function(e){a("throw",e)}))}catch(l){r("throw",l)}}function r(e,o){switch(e){case"return":t.resolve({value:o,done:!0});break;case"throw":t.reject(o);break;default:t.resolve({value:o,done:!1})}(t=t.next)?a(t.key,t.arg):n=null}this._invoke=function(e,o){return new Promise((function(r,i){var s={key:e,arg:o,resolve:r,reject:i,next:null};n?n=n.next=s:(t=n=s,a(e,o))}))},"function"!=typeof e.return&&(this.return=void 0)}function r(e){return function(){return new a(e.apply(this,arguments))}}a.prototype["function"==typeof Symbol&&Symbol.asyncIterator||"@@asyncIterator"]=function(){return this},a.prototype.next=function(e){return this._invoke("next",e)},a.prototype.throw=function(e){return this._invoke("throw",e)},a.prototype.return=function(e){return this._invoke("return",e)}},2263:function(e,t,n){"use strict";n(7294);var o=n(835),a=n(8847),r=n(7414),i=n(6140),s=n(674);t.Z=function(e){var t;return t=e.define?(0,s.tZ)(a.Z,{define:e.define,output_order:e.output_order}):e.children,(0,s.tZ)(o.Z,{css:e.className},(0,s.tZ)(i.Z,{title:e.post_frontmatter.title,description:e.post_frontmatter.description}),(0,s.tZ)(r.Z,{post_frontmatter:e.post_frontmatter}),t)}},7865:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return N},frontmatter:function(){return C}});n(7294);var o,a,r,i,s,b,l,c,h,d,u,g,p=n(2465),m=n(9122),f=n(9395),v=n(7757),y=n.n(v);function w(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return k(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return k(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var o=0,a=function(){};return{s:a,n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,r=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw r}}}}function k(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}function _(e){return e(o||(o=(0,p.Z)(["# Interactive blogging with Observable Notebooks and gatsby.js"])))}function x(e,t,n){return j.apply(this,arguments)}function j(){return(j=(0,f.Z)(y().mark((function e(t,n,o){var l,c,h,d,u,g,f,v,k,_;return y().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:l=0,c="Interactive blogging with Observable Notebooks and gatsby.js";case 2:if(!(l<c.length)){e.next=15;break}return e.next=5,(0,m.Z)(t.delay(40));case 5:return(d=n(a||(a=(0,p.Z)(["<span>","</span>"])),c.substr(l,1))).style.color=o.interpolateViridis(l/c.length),d.setAttribute("value",l),d.setAttribute("ascending","ascending"),h=0==l?n(r||(r=(0,p.Z)(["<span>",""])),d):n(i||(i=(0,p.Z)(["","",""])),h.innerHTML,d),l+=1,e.next=13,n(s||(s=(0,p.Z)(["<h1>","</h1>"])),h);case 13:e.next=2;break;case 15:if(!(l>=c.length)){e.next=27;break}return e.next=18,(0,m.Z)(t.delay(100));case 18:u=n(b||(b=(0,p.Z)(["<h1>","</h1>"])),h),g=u.firstChild.children,f=w(g);try{for(f.s();!(v=f.n()).done;)k=v.value,(_=+k.getAttribute("value"))==c.length|-1==_&&k.toggleAttribute("ascending"),k.hasAttribute("ascending")?_--:_++,k.setAttribute("value",_),k.style.color=o.interpolateViridis(_/c.length)}catch(y){f.e(y)}finally{f.f()}return l+=1,e.next=25,u;case 25:e.next=15;break;case 27:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Z(e){return e(l||(l=(0,p.Z)(["This website contains a variety of interactive content like my [energy usage calculator](https://robinl.github.io/robinlinacre/energy-usage) which I can create easily and host for free.  In this post I explain how the it all works.\n\n## Observable notebooks\n\nI use [Observable Notebooks](https://observablehq.com) as the authoring environment for interactive content.  This is my favourite programming environment because it allows me to [maximise the time I spend on the fun part of programming](https://observablehq.com/@tmcw/why-observable-for-people-who-already-have-a-text-editor).\n\nThis allows readers to not only view the code behind each page ([including this one!](https://observablehq.com/@robinl/interactive-blogging-with-observable-notebooks-and-gatsb)), but also to live-edit it and fork it.  On the [Observable Notebooks](https://observablehq.com) homepage, you can see that the ability to reuse, re-mix and iterate leads to an amazing amount of creativity.\n\nI then use [gatsby.js](gatsbyjs.org) to build my notebooks into a website.  \n\nThe idea is that you end up with the best of all worlds:  A fun, simple authoring environment with unlimited power for interactivity, which can be hosted for free on a static web host like Github pages.\n\nWhat follows are a few notes about how I got everything working.  If you'd rather jump straight into the code, you can find a minimal, working template [here](https://github.com/robinl/gasby_observable_blog/), and the code for my blog is [here](https://github.com/robinl/robinlinacre).\n"])))}function I(e){return e(c||(c=(0,p.Z)(["## Gastby.js as a site generator\n\nGatsby js is a modern website generator that uses the React framework.  Javascript modules can be installed as dependencies, and used within pages on your website.  \n\nThis is a good fit because each Observable notebook can be compiled and downloaded as a JavaScript module - see [here](https://observablehq.com/@observablehq/downloading-and-embedding-notebooks) - and so can be installed and made available as a part of a Gatsby site."])))}function O(e){return e(h||(h=(0,p.Z)(['## Rendering notebooks in gatsby\n\nI use a React component to display each Observable notebook within a div - see [here](https://github.com/RobinL/gasby_observable_blog/blob/dev/src/components/observable_div.jsx) for the implementation.  \n\nI then have an [page component](https://github.com/RobinL/gasby_observable_blog/blob/dev/src/components/obs_page.js) that serves as a default layout for each page on my website which contains a notebook.  \n\nEach notebook is a standard gatsby page which imports the Observable notebook, and then passes it to the page component.  [Here\'s](https://github.com/RobinL/gasby_observable_blog/blob/dev/src/pages/gatsby-test-2.js) an example.   `output_order` allows the author to control which cells are displayed and in what order.\n\nFor a long time I experimented with the idea of loading all notebooks from a json file, and then using createPage (e.g. like  [this](https://github.com/RobinL/gasby_observable_blog/blob/14537c158c2c729cb985a56c5acc5d292c958379/gatsby-node.js#L25) to create the pages,  rather than needing a separate `jsx` page for each notebook.  The json would look like this:\n\n```json\n[\n    {   "page_path": "page1",\n        "observable_note_name": "gatsby-test"\n    },\n    {   \n        "page_path": "page2",\n        "observable_note_name": "gatsby-test-2",\n        "output_order": ["cell1", "cell2"]\n    }\n]\n```\n\nI now don\'t think this is possible, because of the way webpack works.  See [here](https://stackoverflow.com/questions/58011164/dynamic-module-import-in-component-for-gatsby-js-site).\n\n'],['## Rendering notebooks in gatsby\n\nI use a React component to display each Observable notebook within a div - see [here](https://github.com/RobinL/gasby_observable_blog/blob/dev/src/components/observable_div.jsx) for the implementation.  \n\nI then have an [page component](https://github.com/RobinL/gasby_observable_blog/blob/dev/src/components/obs_page.js) that serves as a default layout for each page on my website which contains a notebook.  \n\nEach notebook is a standard gatsby page which imports the Observable notebook, and then passes it to the page component.  [Here\'s](https://github.com/RobinL/gasby_observable_blog/blob/dev/src/pages/gatsby-test-2.js) an example.   \\`output_order\\` allows the author to control which cells are displayed and in what order.\n\nFor a long time I experimented with the idea of loading all notebooks from a json file, and then using createPage (e.g. like  [this](https://github.com/RobinL/gasby_observable_blog/blob/14537c158c2c729cb985a56c5acc5d292c958379/gatsby-node.js#L25) to create the pages,  rather than needing a separate \\`jsx\\` page for each notebook.  The json would look like this:\n\n\\`\\`\\`json\n[\n    {   "page_path": "page1",\n        "observable_note_name": "gatsby-test"\n    },\n    {   \n        "page_path": "page2",\n        "observable_note_name": "gatsby-test-2",\n        "output_order": ["cell1", "cell2"]\n    }\n]\n\\`\\`\\`\n\nI now don\'t think this is possible, because of the way webpack works.  See [here](https://stackoverflow.com/questions/58011164/dynamic-module-import-in-component-for-gatsby-js-site).\n\n'])))}function L(e){return e(d||(d=(0,p.Z)(["## Continuous deployment\n\nI use Github actions for continuous deployment.  Specifically, any commits merged into dev trigger a workflow which builds the site, and pushes it to master, thus making it available as a github page.\n\nYou can see the action [here](https://github.com/RobinL/gasby_observable_blog/blob/dev/.github/workflows/main.yml).  Note you will need to generate a secret containing a [Github PAT](https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line) and add it to your repo's secrets.  The enables the workflow to commit code back to your repo.\n"])))}function R(e){return e(u||(u=(0,p.Z)(["## Authoring workflow\n\nOnce all this is set up, the authoring process is very simple:\n\n**Step 1 - author your notebook and get the link**\n\nWrite an observable notebook, and publish it. Click the 'download code' button to get a link to the javascript module.  In the case of [this post](https://observablehq.com/@robinl/interactive-blogging-with-observable-notebooks-and-gatsb), the link to the code is `https://api.observablehq.com/@robinl/interactive-blogging-with-observable-notebooks-and-gatsb.tgz?v=3`.  \n\n**Step 2 - yarn add the notebook to gatsby**\n\nIn your gatsby website, install the notebook using \n\n```sh\nyarn add https://api.observablehq.com/@robinl/interactive-blogging-with-observable-notebooks-and-gatsb.tgz?v=3\n```\n\n**Step 3 - create a new page**\n\nCreate a new page in your gatsby `src/pages/` directory called, say `interactive_blogging.jsx`.\n\nAdd the following boilerplate:\n\n```js\nimport define from \"@robinl/interactive-blogging-with-observable-notebooks-and-gatsb\"\nimport ObservablePage from \"../components/obs_page\"\n\nexport default ({ data }) => (\n    ObservablePage(define)\n)\n```\n\n\nThat's it!\n\nTo update a page is even easier - you just retrieve the version number of the notebook from 'history' page with the Observable notebook, and manually update the `yarn.lock` file with the new version number. See [here](https://github.com/RobinL/robinlinacre/commit/ad9255cc57cecfeaf3a93f6b8c9707abad558686) for an example.\n\n\nYou can find an example of all the code you need to add a page [here](https://github.com/RobinL/robinlinacre/pull/19), which is the pull request that created the page you're reading right now!\n\n"],["## Authoring workflow\n\nOnce all this is set up, the authoring process is very simple:\n\n**Step 1 - author your notebook and get the link**\n\nWrite an observable notebook, and publish it. Click the 'download code' button to get a link to the javascript module.  In the case of [this post](https://observablehq.com/@robinl/interactive-blogging-with-observable-notebooks-and-gatsb), the link to the code is \\`https://api.observablehq.com/@robinl/interactive-blogging-with-observable-notebooks-and-gatsb.tgz?v=3\\`.  \n\n**Step 2 - yarn add the notebook to gatsby**\n\nIn your gatsby website, install the notebook using \n\n\\`\\`\\`sh\nyarn add https://api.observablehq.com/@robinl/interactive-blogging-with-observable-notebooks-and-gatsb.tgz?v=3\n\\`\\`\\`\n\n**Step 3 - create a new page**\n\nCreate a new page in your gatsby \\`src/pages/\\` directory called, say \\`interactive_blogging.jsx\\`.\n\nAdd the following boilerplate:\n\n\\`\\`\\`js\nimport define from \"@robinl/interactive-blogging-with-observable-notebooks-and-gatsb\"\nimport ObservablePage from \"../components/obs_page\"\n\nexport default ({ data }) => (\n    ObservablePage(define)\n)\n\\`\\`\\`\n\n\nThat's it!\n\nTo update a page is even easier - you just retrieve the version number of the notebook from 'history' page with the Observable notebook, and manually update the \\`yarn.lock\\` file with the new version number. See [here](https://github.com/RobinL/robinlinacre/commit/ad9255cc57cecfeaf3a93f6b8c9707abad558686) for an example.\n\n\nYou can find an example of all the code you need to add a page [here](https://github.com/RobinL/robinlinacre/pull/19), which is the pull request that created the page you're reading right now!\n\n"])))}function q(e){return e(g||(g=(0,p.Z)(["## mdx\n\nAnother good option within the gatsby ecosystem for authoring interactive pages is mdx.  This is an excellent choice if you want to, for instance, write a blog post in markdown [like this](https://robinl.github.io/robinlinacre/my_mdx_page) but add a vega lite chart.\n\nYou can find an example of a component that renders mdx [here](https://github.com/RobinL/robinlinacre/blob/c375c64428bad3021c90594e5d976dc31080de83/src/pages/my_mdx_page.jsx#L1), an `mdx` page that includes a vega lite chart [here](https://github.com/RobinL/robinlinacre/blob/c375c64428bad3021c90594e5d976dc31080de83/src/mdx/first_post.mdx) and a pull request that adds code syntax highlighting for these pages [here](https://github.com/RobinL/robinlinacre/pull/18/files).\n\n"],["## mdx\n\nAnother good option within the gatsby ecosystem for authoring interactive pages is mdx.  This is an excellent choice if you want to, for instance, write a blog post in markdown [like this](https://robinl.github.io/robinlinacre/my_mdx_page) but add a vega lite chart.\n\nYou can find an example of a component that renders mdx [here](https://github.com/RobinL/robinlinacre/blob/c375c64428bad3021c90594e5d976dc31080de83/src/pages/my_mdx_page.jsx#L1), an \\`mdx\\` page that includes a vega lite chart [here](https://github.com/RobinL/robinlinacre/blob/c375c64428bad3021c90594e5d976dc31080de83/src/mdx/first_post.mdx) and a pull request that adds code syntax highlighting for these pages [here](https://github.com/RobinL/robinlinacre/pull/18/files).\n\n"])))}function A(e){return e("d3")}function S(e,t){var n=e.module();return n.variable(t()).define(["md"],_),n.variable(t("message")).define("message",["Promises","html","d3"],x),n.variable(t("md1")).define("md1",["md"],Z),n.variable(t("md2")).define("md2",["md"],I),n.variable(t("md3")).define("md3",["md"],O),n.variable(t("md4")).define("md4",["md"],L),n.variable(t("md5")).define("md5",["md"],R),n.variable(t("md6")).define("md6",["md"],q),n.variable(t("d3")).define("d3",["require"],A),n}var T=n(2263),P=n(674),C={title:"Interactive blogging with Observable Notebooks and gatsby.js",post_date:"2019-10-11",code_url:"https://observablehq.com/@robinl/interactive-blogging-with-observable-notebooks-and-gatsb",post_type:"obs",post_category:"data",description:""},z=["message","md1","md2","md3","md4","md5","md6"],N=function(e){e.data;return(0,P.tZ)(T.Z,{define:S,output_order:z,post_frontmatter:C})}}}]);
//# sourceMappingURL=component---src-pages-interactive-blogging-jsx-cb7503a8af29210cdf47.js.map